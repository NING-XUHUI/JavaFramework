<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--    指定properties文件的位置   -->
    <properties resource="jdbc.properties"/>

    <!-- settings ：控制mybatis的全局行为 -->
    <settings>
        <setting name="logImpl" value="STDOUT_LOGGING"/>
    </settings>
    <!--    定义别名    -->
    <!--        <typeAliases>-->
    <!--            &lt;!&ndash;    一个类型一个自定义别名-->
    <!--                    type:类型的全限定名称-->
    <!--                    alias:短小、容易记忆的名称-->
    <!--            &ndash;&gt;-->
    <!--            <typeAlias type="com.xatu.domain.Student" alias="stu" />-->
    <!--            <typeAlias type="com.xatu.vo.ViewStudent" alias="vstu" />-->
    <!--        </typeAliases>-->
    <!--    第二种方式
            <package name=""> name是包名，包中所有的类，类名即别名
    -->
    <!--    <typeAliases>-->
    <!--        <package name="com.xatu.domain"/>-->
    <!--        <package name="com.xatu.vo"/>-->
    <!--    </typeAliases>-->

    <!--
        环境配置
        default必须和某个environment的id是一样的
        告诉mybatis使用那个数据库的信息，就是访问哪个数据库
    -->
    <environments default="mydev"> <!--or online-->
        <!--    environment : 一个数据库信息的配置，环境
                id：一个唯一的值，自定义，表示环境的名称
            -->
        <environment id="mydev">
            <!--
                   transactionManager : Mybatis的事务类型
                   type：JDBC（表示使用jdbc中的Connection对象的commit，rollback做事务处理）
            -->
            <!--
               transactionManager:mybatis提交事务，回顾事务的方式
               type：事务的处理的类型
                    1)JDBC 表示mybatis底层是调用JDBC中的Connection对象的，commit，rollback
                    2)MANAGRED 把mybatis的事务处理委托给其他的容器（一个服务器软件或一个框架spring）
            -->
            <transactionManager type="JDBC"/>
            <!--
                dataSource:表示数据源，连接数据库
                type：数据源类型，POOLED表示使用连接池
                1)POOLED 使用连接池，mybatis创建PooledDataSource类
                2)UNPOOLED:不使用连接池
                3)JNDI java命名和目录服务（windows的注册表）
            -->
            <dataSource type="POOLED">
                <!--
                    driver,user,username,password是固定的,不能自定义
                -->
                <!--数据库的驱动类名-->
                <property name="driver" value="${jdbc.driver}"/>
                <!--连接数据库的url字符串-->
                <property name="url" value="${jdbc.url}"/>
                <!--访问数据库的用户名-->
                <property name="username" value="${jdbc.user}"/>
                <!--密码-->
                <property name="password" value="${jdbc.passwd}"/>
            </dataSource>
        </environment>
    </environments>
    <mappers>
        <mapper resource="com/xatu/dao/StudentDao.xml"/>
    </mappers>
</configuration>
